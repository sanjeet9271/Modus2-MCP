---
description: 
globs: 
alwaysApply: true
---
# The Modus React Design System

A comprehensive React component library built on top of Modus Web Components, providing a complete design system for React applications.

# Getting Started

## Installation

**Note:** Modus React Components have a peer dependency with Modus Web Components and require the installation of both packages.

<b>
  Lock the installed package versions to avoid unintended breakages on future npm installs.
</b>

Ensure that you specify the target version of React for the modus-wc-react package (e.g., react18 for React 18).

```bash
npm install @trimble-oss/moduswebcomponents-react
```

## Usage

### 1. Set up the styling:

You will need to import our styling in your main JavaScript or CSS file:

```js
import '@trimble-oss/moduswebcomponents/modus-wc-styles.css';
```

### 2. Set the theme:

The theme can be set manually or by using the `ModusWcThemeSwitcher` component. Available themes are:

- `modus-classic-light`
- `modus-classic-dark`
- `modus-modern-light` (default)
- `modus-modern-dark`

### 3. Use the components:

```tsx
import { ModusWcButton, ModusWcBadge } from '@trimble-oss/moduswebcomponents-react';

function App() {
  return (
    <div>
      <ModusWcButton variant="primary">Click me</ModusWcButton>
      <ModusWcBadge aria-label="Badge" content="Words" />
    </div>
  );
}
```

## TypeScript Support

Types are a crucial part of our component library, providing robust type safety and enhanced developer experience through comprehensive TypeScript definitions for all components.

```tsx
import React from 'react';
import { ModusWcSelect } from '@trimble-oss/moduswebcomponents-react';

interface SelectOption {
  label: string;
  value: string;
}

const options: SelectOption[] = [
  {
    label: 'Option 1',
    value: '1',
  },
  {
    label: 'Option 2',
    value: '2',
  },
];

const MyComponent: React.FC = () => {
  const handleSelectionChange = (e: CustomEvent) => {
    console.log('Selected:', e.detail);
  };

  return (
    <ModusWcSelect
      options={options}
      onSelectionChange={handleSelectionChange}
    />
  );
};
```

# React Component Patterns

## Controlled Input Pattern

The controlled input pattern is essential in React applications where the form element's value is controlled by the React component state. This pattern offers several benefits:

- Single source of truth for input values
- Ability to validate and transform input data in real-time
- Simplified form state management
- Improved testability and debugging

### Basic Controlled Input Example

```tsx
import React, { useState } from 'react';
import { ModusWcTextInput } from '@trimble-oss/moduswebcomponents-react';

const ControlledTextInput: React.FC = () => {
  const [value, setValue] = useState('');

  const handleInputChange = (
    e: CustomEvent<HTMLModusWcTextInputElementEventMap['inputChange']>
  ) => {
    const newValue = e.detail.target.value;
    setValue(newValue);
  };

  return (
    <ModusWcTextInput
      onInputChange={handleInputChange}
      value={value}
      placeholder="Enter text..."
    />
  );
};
```

### Advanced Controlled Input with Validation

```tsx
import React, { useState } from 'react';
import { ModusWcTextInput } from '@trimble-oss/moduswebcomponents-react';

interface Props extends React.ComponentProps<typeof ModusWcTextInput> {
  onValueChange?: (value: string) => void;
  validation?: (value: string) => string | null;
}

const ValidatedTextInput: React.FC<Props> = ({ 
  onValueChange, 
  validation, 
  ...props 
}) => {
  const [value, setValue] = useState('');
  const [error, setError] = useState<string | null>(null);

  const handleInputChange = (
    e: CustomEvent<HTMLModusWcTextInputElementEventMap['inputChange']>
  ) => {
    const newValue = e.detail.target.value;
    setValue(newValue);
    
    // Validate input
    if (validation) {
      const validationError = validation(newValue);
      setError(validationError);
    }
    
    // Notify parent component
    if (onValueChange) {
      onValueChange(newValue);
    }
  };

  return (
    <ModusWcTextInput
      {...props}
      onInputChange={handleInputChange}
      value={value}
      errorText={error}
    />
  );
};
```

## Component Wrapping Pattern

When using Modus React Components, it's recommended to wrap them in your own React components. This abstracts away the library dependency and provides more flexibility for your application.

### Simple Wrapper Example

```tsx
import React from 'react';
import { ModusWcAvatar } from '@trimble-oss/moduswebcomponents-react';

interface Props extends React.ComponentProps<typeof ModusWcAvatar> {}

const Avatar: React.FC<Props> = (props) => {
  return <ModusWcAvatar {...props} />;
};

export default Avatar;
```

### Complex Wrapper with Custom Logic

```tsx
import React from 'react';
import { ModusWcTextInput } from '@trimble-oss/moduswebcomponents-react';

interface Props
  extends Omit<React.ComponentProps<typeof ModusWcTextInput>, 'onInputChange'> {
  onValueChange: (value: string) => void;
  debounceMs?: number;
}

const TextInput: React.FC<Props> = ({ 
  onValueChange, 
  debounceMs = 300, 
  ...props 
}) => {
  const [debounceTimer, setDebounceTimer] = useState<NodeJS.Timeout | null>(null);

  const handleInputChange = (
    e: CustomEvent<HTMLModusWcTextInputElementEventMap['inputChange']>
  ) => {
    const value = e.detail.target.value;
    
    // Clear existing timer
    if (debounceTimer) {
      clearTimeout(debounceTimer);
    }
    
    // Set new timer
    const newTimer = setTimeout(() => {
      onValueChange(value);
    }, debounceMs);
    
    setDebounceTimer(newTimer);
  };

  return <ModusWcTextInput {...props} onInputChange={handleInputChange} />;
};

export default TextInput;
```

# Modus Icon Usage

Several components require [Modus icons](mdc:https:/modus-icons.trimble.com) to be installed in the host application. To install icons, add the following HTML to your application's `public/index.html`:

<b>
  Modus (font) icons currently only supports the usage of one icon set
  (outlined, filled, transportation) per application. If you require multiple
  sets, reach out to [Modus Design](mdc:https:/mail.google.com/chat/u/0/#chat/space/AAAAexugR1k) and comment
  on this [GitHub Issue](mdc:https:/github.com/trimble-oss/modus-icons/issues/363).
</b>

```html
<head>
  <link
    rel="preload"
    href="https://cdn.jsdelivr.net/npm/@trimble-oss/modus-icons@latest/dist/modus-outlined/fonts/modus-icons.css"
    as="style"
    crossorigin="anonymous"
  />
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/@trimble-oss/modus-icons@latest/dist/modus-outlined/fonts/modus-icons.css"
  />
</head>
```

## Using Icons in React Components

```tsx
import React from 'react';
import { ModusWcButton } from '@trimble-oss/moduswebcomponents-react';

const IconButton: React.FC = () => {
  return (
    <ModusWcButton 
      variant="primary"
      iconLeft="add"
    >
      Add Item
    </ModusWcButton>
  );
};
```

# Styling

## Custom Styling

The Modus React Components library provides several ways to customize the appearance of components.

### 1. Theme Usage

#### Using the Theme Provider and Switcher:

```tsx
import React from 'react';
import { 
  ModusWcThemeProvider, 
  ModusWcThemeSwitcher 
} from '@trimble-oss/moduswebcomponents-react';

const App: React.FC = () => {
  const initialTheme = { theme: "modus-modern-light" };

  return (
    <ModusWcThemeProvider initialTheme={JSON.stringify(initialTheme)}>
      <div className="app">
        <ModusWcThemeSwitcher aria-label="Toggle theme" />
        {/* Your app content */}
      </div>
    </ModusWcThemeProvider>
  );
};
```

#### Manually applying themes:

Add the appropriate classes to your `public/index.html`:

```html
<!-- Light theme -->
<html class="light" data-theme="modus-modern-light" data-mode="light">
  ...
</html>

<!-- Dark theme -->
<html class="dark" data-theme="modus-modern-dark" data-mode="dark">
  ...
</html>
```

### 2. Override CSS Custom Properties


```css
/* In your global CSS file */
:root {
  --modus-wc-primary-color: purple;
  --modus-wc-color-info: green;
  --modus-wc-font-weight-normal: 500;
}
```

### 3. Use Custom CSS Classes

Many components accept a `customClass` prop for additional styling:

```tsx
import React from 'react';
import { ModusWcButton } from '@trimble-oss/moduswebcomponents-react';

const CustomStyledButton: React.FC = () => {
  return (
    <ModusWcButton
      variant="primary"
      customClass="my-custom-button"
    >
      Custom Button
    </ModusWcButton>
  );
};
```

```css
/* In your CSS file */
.my-custom-button {
  background-color: purple;
  border-color: purple;
}
```

### 4. Apply Direct CSS Overrides

Since Shadow DOM is disabled, you can directly target component classes.

Our component classes are all prefixed with `modus-wc-` to avoid collisions.

```css
.modus-wc-btn {
  background-color: yellow;
  color: black;
}
```

### 5. Styled Components Integration

You can also use styled-components or similar CSS-in-JS libraries:

```tsx
import React from 'react';
import styled from 'styled-components';
import { ModusWcButton } from '@trimble-oss/moduswebcomponents-react';

const StyledButton = styled(ModusWcButton)`
  --modus-wc-primary-color: #ff6b6b;
  border-radius: 12px;
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
`;

const MyComponent: React.FC = () => {
  return <StyledButton variant="primary">Styled Button</StyledButton>;
};
```

## CSS Reset (Tailwind Preflight)

Tailwind performs a CSS reset (preflight) that normalizes browser styles to ensure all component styles are applied
consistently across browsers. This reset is automatically loaded into applications consuming the library. We've
provided Modus-specific overrides in `styles/tailwind.css` to maintain compatibility with our design system, though
these overrides aren't exhaustive. If you need additional style adjustments, you can either:

1. Add custom CSS overrides in your application
2. Create a GitHub issue describing the needed override (contributions welcome)

## Best Practices

### 1. Component Composition

Build complex components by composing simpler Modus components:

```tsx
import React from 'react';
import { 
  ModusWcCard, 
  ModusWcButton, 
  ModusWcAvatar, 
  ModusWcBadge 
} from '@trimble-oss/moduswebcomponents-react';

interface UserCardProps {
  user: {
    name: string;
    avatar: string;
    status: 'online' | 'offline';
  };
  onEdit: () => void;
}

const UserCard: React.FC<UserCardProps> = ({ user, onEdit }) => {
  return (
    <ModusWcCard>
      <div className="user-card-content">
        <ModusWcAvatar src={user.avatar} alt={user.name} />
        <div className="user-info">
          <h3>{user.name}</h3>
          <ModusWcBadge 
            content={user.status}
            variant={user.status === 'online' ? 'success' : 'secondary'} 
          />
        </div>
        <ModusWcButton 
          variant="outline" 
          onClick={onEdit}
          iconLeft="edit"
        >
          Edit
        </ModusWcButton>
      </div>
    </ModusWcCard>
  );
};
```

### 2. Performance Optimization

Use React.memo for components that receive stable props:

```tsx
import React from 'react';
import { ModusWcButton } from '@trimble-oss/moduswebcomponents-react';

interface ActionButtonProps {
  label: string;
  onClick: () => void;
  variant?: 'primary' | 'secondary' | 'outline';
}

const ActionButton: React.FC<ActionButtonProps> = React.memo(({ 
  label, 
  onClick, 
  variant = 'primary' 
}) => {
  return (
    <ModusWcButton variant={variant} onClick={onClick}>
      {label}
    </ModusWcButton>
  );
});

ActionButton.displayName = 'ActionButton';
```

### 3. Accessibility

Always provide proper accessibility attributes:

```tsx
import React from 'react';
import { ModusWcTextInput, ModusWcButton } from '@trimble-oss/moduswebcomponents-react';

const LoginForm: React.FC = () => {
  return (
    <form role="form" aria-label="Login form">
      <ModusWcTextInput
        label="Email"
        type="email"
        required
        aria-describedby="email-help"
      />
      <ModusWcTextInput
        label="Password"
        type="password"
        required
        aria-describedby="password-help"
      />
      <ModusWcButton 
        type="submit" 
        variant="primary"
        aria-label="Submit login form"
      >
        Login
      </ModusWcButton>
    </form>
  );
};
```








