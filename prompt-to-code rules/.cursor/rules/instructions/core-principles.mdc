---
description: This file needs to be requested everytime you're given to implement Modus Project
globs: 
alwaysApply: false
---
# Modus 2.0 - Core Implementation Principles

> **ARCHITECT LEVEL GUIDANCE**: This document defines the fundamental principles for implementing Modus 2.0 projects. These principles must be followed without exception to ensure consistency, reliability, and maintainability.

---

## 🎯 Implementation Methodology

### Phase 1: Pre-Implementation Verification
- **ALWAYS** verify component existence using official tools before implementation
- **ALWAYS** fetch component details and properties throug `get_component_details` before fixing bug or implementing.
- **ALWAYS** verify icon names using `get_modus_icons_by_char` before usage
- **NEVER** assume components or icons exist without verification

### Phase 2: Component Selection Strategy
- **ALWAYS** prioritize Modus components over HTML elements
- **ALWAYS** use evidence-based implementations from official documentation
- **NEVER** create custom components when Modus alternatives exist
- **NEVER** make assumptions about component behavior without documentation

### Phase 3: Event & Styling Implementation
- **ALWAYS** use native DOM events with `addEventListener` over React synthetic events
- **ALWAYS** implement proper event cleanup in `useEffect` return functions
- **ALWAYS** use `customClass` prop for component styling customizations
- **ALWAYS** follow styling guidelines from [styling-rules.mdc](mdc:.cursor/rules/styling-rules.mdc)
- **NEVER** sacrifice visual quality for implementation speed
- **NEVER** : AVOID CREATING COMPONENT WHEN THERE'S A MODUS COMPONENT AVIALBLE FOR THAT. 

---

## 🏗️ Architecture Standards

### Component Design Principles
1. **Modular Architecture**: Create reusable, single-responsibility components
2. **Layout Consistency**: Ensure full-width layouts and proper alignment
3. **Documentation**: Document all special considerations and workarounds
4. **Testing**: Verify components individually and in context using Browser MCP

### Event Management Best Practices
```typescript
// ✅ CORRECT: Native DOM events with cleanup
useEffect(() => {
  const element = elementRef.current;
  if (element) {
    element.addEventListener('eventName', handleEvent);
    return () => element.removeEventListener('eventName', handleEvent);
  }
}, []);

// ❌ INCORRECT: React synthetic events without cleanup
<Component onClick={handleClick} />
```

---

## 📁 Standard Project Structure

```
src/
├── components/           # Reusable UI components
│   ├── layout/          # Navigation, headers, footers
│   ├── shared/          # Cross-feature shared components  
│   └── feature/         # Feature-specific components
├── pages/               # Route-based page components
├── context/             # State management providers
├── hooks/               # Custom React hooks
├── routes/              # Application routing
├── utils/               # Helper functions
├── assets/              # Static resources
└── styles/              # Global and component styles
```

---

## ✅ Critical Checkpoints

**Before Implementation:**
- [ ] Component existence verified through official tools
- [ ] Icon names validated using Modus icon library
- [ ] Component properties and events documented

**During Implementation:**
- [ ] Native DOM events implemented with proper cleanup
- [ ] **Modus components used instead of HTML elements**
- [ ] Custom styling applied through `customClass` prop. You can use this for any modification in the component styling. 
- [ ] Visual consistency maintained across layouts

**After Implementation:**
- [ ] Components tested individually and in context
- [ ] Event listeners properly cleaned up
- [ ] Documentation updated for any special considerations
- [ ] Browser MCP testing completed for visual verification

---

## 🚫 Anti-Patterns to Avoid

1. **Assumption-Based Development**: Never assume component properties or behavior
2. **Memory Leaks**: Always cleanup event listeners in useEffect returns
3. **Custom HTML Overuse**: Don't create HTML elements when Modus components exist
4. **Undocumented Solutions**: Never implement workarounds without documentation
5. **Synthetic Event Preference**: Avoid React synthetic events when DOM events are available
