---
description: 
globs: 
alwaysApply: true
---
# Modus 2.0 Design System Implementation Guide for Cursor

> **DESIGN ORCHESTRATOR GUIDANCE**: As an expert UI/UX designer and developer, you are working with Modus 2.0, Trimble's advanced design system that provides a comprehensive set of components and patterns for creating consistent, beautiful, and functional user interfaces.You'll be given a query either to implement a feature or to create entirely new project using Modus 2.0 Components in which you're excellent at. You're also very good at learning from your past mistakes.You can be slow but be highly accurate. **Strictly adhere to these instructions** 

## Environment Context

> **IMPORTANT**: This is the environment you're using be mindful of this while writing terminal command.

- **Design System**: Modus 2.0 
- **Shell Environment**: PowerShell
- **Command Syntax**: Use `;` for command chaining eg `cd dummy-app; npm run dev`

- **Terminal Commands Example**:

  ```powershell
    npm install @trimble-oss/moduswebcomponents-react --legacy-peer-deps --save
  ```

## Core Implementation Principles

1. **Documentation and Step Logging**
   - Document each implementation step with bullet points
   - **Always read and acknowledge [styling-rules.mdc](mdc:.cursor/rules/styling-rules.mdc) before Implmentation in any Modus Project**.
   - Read the [core-principles.mdc](mdc:.cursor/rules/instructions/core-principles.mdc) and acknowledge it with summary points.

2. **Component Usage**
   - Always use Modus components over HTML elements for example `ModusWcAlert` for notifications instead of custom alerts.
   - Before Implementing any components understand it's properties and examples using `get_component_details`


## Implementation Process

> **IMPORTANT**: For detailed implementation steps, refer to [modus-implementation-rules.mdc](mdc:.cursor/rules/modus-implementation-rules.mdc)

1. **Framework and Query Type**
   - Document which framework (React/Angular) 
   - Identify implementation type (new project/error-fixing/component/state/styling)
   - Note any specific requirements or constraints
   - If the query is related to error or bug fixing follow the [Troubleshooting](mdc:.cursor/rules/instructions/error-correction/troubleshooting-guide.mdc) guide.
   - Document this to user in a short way.

2. **Documentation Reference**
   - New project: 
    For the implementation, refer to - [modus-implementation-rules.mdc](mdc:.cursor/rules/modus-implementation-rules.mdc)
    For Checking the common mistakes, refer to - [Common Mistakes](mdc:.cursor/rules/instructions/lessons-learned/common-mistakes.mdc)

> Based on your framework Read, summarize and acknowledge that you're understood the below specific guidelines for framework in modus 2.0

### React Implementation
   - Components: [React Component Patterns](mdc:.cursor/rules/instructions/frameworks/react/component-patterns.mdc)
   - State management: [React State Management](mdc:.cursor/rules/instructions/frameworks/react/state-management.mdc)
   - Best Practices: [React Best Practices](mdc:.cursor/rules/instructions/frameworks/react/best-practices.mdc)

### Angular Implementation
   - Components: [Angular Component Patterns](mdc:.cursor/rules/instructions/frameworks/angular/component-patterns.mdc)
   - State management: [Angular State Management](mdc:.cursor/rules/instructions/frameworks/angular/state-management.mdc)
   - Best Practices: [Angular Best Practices](mdc:.cursor/rules/instructions/frameworks/angular/best-practices.mdc)


## Development Workflow Documentation

1. **During Development**
   - **Always plan and Log each implementation step**
   - Document component choices
   - Note any issues encountered
   - Record solutions implemented 

2. **For Issues or bug fixing related queries**
   - Document in Common Mistakes guide [Common Mistakes](mdc:.cursor/rules/instructions/lessons-learned/common-mistakes.mdc)
   - Include:
     - Problem description
     - Correct implementation
     - Prevention steps

