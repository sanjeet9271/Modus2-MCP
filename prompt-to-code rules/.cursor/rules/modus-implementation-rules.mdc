---
description: 
globs: 
alwaysApply: true
---
## Mandatory Implementation Process

> **⚠️ MANDATORY PROCESS ⚠️**: Avoid skipping any step below. You MUST follow these steps in exact sequence with no exceptions. For each step, document your actions before proceeding to next step.

### REQUIRED SEQUENTIAL PROCESS

1. **Read and Document Understanding of Rules**
   - **Review, Summarize and acknowledge understanding of all rules given to you as `.mdc` files one by one including the ones related to the framework you're going to work with** 
   - Write in chat "Modus Rules Read and Understood" confirmation before proceeding
   - Note any specific requirements or constraints mentioned

2. **Review Past Implementation Mistakes**
   - Ensure you've read [common-mistakes.mdc](mdc:.cursor/rules/instructions/lessons-learned/common-mistakes.mdc) thoroughly
   - Ensure you've read [styling-rules.mdc](mdc:.cursor/rules/styling-rules.mdc) thorougly
   - Document relevant past issues and their solutions in short form
   - Acknowledge completion of review before proceeding

3. **Installation and setup of Modus**:
   - Use `getting_started_guidelines` tools to fetch instructions regarding modus 2.0. Acknowledge and summarize it in bullet points.
   - Check if the project's `package.json` has modus components installed if not then only install it
   - Check if the `Open Sans` font and   `defineCustomElements()` are properly set up from `index.html` and `main.jsx` or `main.tsx` respectively.

4. **Get Complete List of Available Modus Components**
   - Use `get_list_of_all_modus_components` tool
   - Document all available components

5. **Create Detailed Implementation Plan**
   - Mapping requirements to verified Modus components create a detailed plan page by page stating which components will be used
   - **Always think before implementing any new Page check the current status of project and then follow** 
   - Use `get_component_details` tool to fetch the details of component and for each component
     - Available properties
     - Events and event names
     - Required parent/child relationships
     - Usage examples
   - For components with icons:
     - Use `get_modus_icons_by_char` to verify icon names. use empty string as argument to get all valid modus icon names.
     - Document verified icon names for use

   - Implement following documented patterns [component-patterns.mdc](mdc:.cursor/rules/instructions/frameworks/react/component-patterns.mdc)

6. **Integration Testing**
   - Test components together look for typescript except trivial ones like `any` and `not used`.
   - Verify interactions between components
   - Document any integration issues

7. **Final Review and Documentation**
   - Review against initial requirements
   - Document any deviations or limitations
   - Create implementation notes for team reference

### Implementation with DOM Events
   - Follow the proper event handling pattern with refs and useEffect
   - Implement proper event cleanup in useEffect return function
   
   ```jsx
   const elementRef = useRef(null);
   
   useEffect(() => {
     if (elementRef.current) {
       elementRef.current.addEventListener('eventName', handleEvent);
       return () => {
         elementRef.current?.removeEventListener('eventName', handleEvent);
       };
     }
   }, [dependencies]); 
   ``` 




