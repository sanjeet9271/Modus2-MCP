---
description: 
globs: *.jsx,*.tsx
alwaysApply: false
---
# React Best Practices for Modus Projects

> **LEAD LEVEL GUIDANCE**: This document provides React-specific implementation guidance for Modus projects. It assumes you have already read the core principles.

## Project Structure

### Directory Organization

- **Modular Organization**: Each component should have its own directory containing:
  - `index.tsx` for the main component file
  - `styles.css` or `styles.module.css` for component-specific styles
  - `utils` directory for helper functions

### Standard Project Structure

```
src/
├── components/           # Reusable components
│   ├── layout/          # Layout components (Navbar, Sidebar, Footer)
│   ├── shared/          # Shared components used across features
│   └── feature/         # Feature-specific components
├── pages/               # Page components that use reusable components
├── context/             # Context providers for state management
├── hooks/               # Custom React hooks
├── routes/              # Routing configuration
├── utils/               # Utility functions
└── assets/              # Static assets
```

## Component Implementation

### Component Creation Guidelines

1. **Single Responsibility**: Each component should have a single responsibility
2. **Prop Documentation**: Document all props with JSDoc comments
3. **Default Props**: Provide default values for optional props
4. **Prop Validation**: Use PropTypes or TypeScript for prop validation
5. **Forward Refs**: Use forwardRef for components that need refs passed to them


## Best Practice: Wrapping Components

When using Modus React Components directly, it is recommended to wrap them in corresponding React components within your application. This will abstract away from the library dependency, allowing more flexibility for you and your application in the future.

### Simple Wrapper Example

```tsx
import React from 'react';
import { ModusWcAvatar } from '@trimble-oss/moduswebcomponents-react';

interface Props extends React.ComponentProps<typeof ModusWcAvatar> {}

const Avatar: React.FC<Props> = (props) => {
  return <ModusWcAvatar {...props} />;
};

export default Avatar;
```

### Advanced Wrapper Example

```tsx
import React from 'react';
import { ModusWcTextInput } from '@trimble-oss/moduswebcomponents-react';

interface Props
  extends Omit<React.ComponentProps<typeof ModusWcTextInput>, 'inputChange'> {
  onValueChange: (value: string) => void;
}

const TextInput: React.FC<Props> = (props) => {
  const handleInputChange = (
    e: CustomEvent<HTMLModusWcTextInputElementEventMap['inputChange']>
  ) => {
    const value = e.detail.target.value;
    props.onValueChange(value);
  };

  return <ModusWcTextInput {...props} onInputChange={handleInputChange} />;
};

export default TextInput;
```

## Benefits of Using React Wrappers

1. **Type Safety**: Full TypeScript support for component props and event handling
2. **React Integration**: Components behave like native React components
3. **Standard Patterns**: Support for controlled components and React patterns
4. **Performance**: Optimized rendering with React's virtual DOM
5. **Maintenance**: Easier to maintain as you can update the component library without changing component usage

## Common Patterns

### Working with Forms

React forms work well with Modus Web Components by applying the controlled input pattern:

```tsx
import React, { useState, FormEvent } from 'react';
import { ModusWcTextInput, ModusWcButton } from '@trimble-oss/moduswebcomponents-react';

const FormExample: React.FC = () => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: ''
  });

  const handleInputChange = (field: string) => (
    e: CustomEvent<any>
  ) => {
    setFormData({
      ...formData,
      [field]: e.detail.target.value
    });
  };

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    console.log('Form submitted with:', formData);
  };

  return (
    <form onSubmit={handleSubmit}>
      <ModusWcTextInput
        label="First Name"
        value={formData.firstName}
        onInputChange={handleInputChange('firstName')}
      />
      <ModusWcTextInput
        label="Last Name"
        value={formData.lastName}
        onInputChange={handleInputChange('lastName')}
      />
      <ModusWcButton type="submit">Submit</ModusWcButton>
    </form>
  );
};
```
