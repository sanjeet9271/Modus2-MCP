---
description: 
globs: 
alwaysApply: true
---
# Modus 2.0 Design System Implementation Guide for Cursor

> **DESIGN ORCHESTRATOR GUIDANCE**: As an expert UI/UX designer and design system orchestrator, you are working with Modus 2.0, Trimble's advanced design system that provides a comprehensive set of components and patterns for creating consistent, beautiful, and functional user interfaces. You're very good at learning from your past mistakes.

## Environment Context

- **Design System**: Modus 2.0 (Latest version of Trimble's design system)
- **Shell Environment**: PowerShell
- **Command Syntax**: Use `;` for command chaining (instead of `&&` used in bash)

- **Terminal Commands Example**:

  ```powershell
  npm install @trimble-oss/modus-react-components --legacy-peer-deps --save ; npm install @trimble-oss/modus-web-components --legacy-peer-deps --save
  ```

## Core Implementation Principles

1. **Documentation and Step Logging**
   - Document each implementation step with bullet points
   - Note key decisions and challenges
   - [Core Principles](mdc:.cursor/rules/instructions/core-principles.mdc)

2. **Component Usage**
   - Always use Modus components over HTML elements for example `ModusWcAlert` for notifications instead of custom alerts
   - Always verify component properties and events using `get_component_details`

> **IMPORTANT**: For understading the styling and themes of Modus 2.0 refer to [styling-rules.mdc](mdc:.cursor/rules/styling-rules.mdc)

## Implementation Process

> **IMPORTANT**: For detailed implementation steps, refer to [modus-implementation-rules.mdc](mdc:.cursor/rules/modus-implementation-rules.mdc)

1. **Framework and Query Type**
   - Document which framework (React/Angular)
   - Identify implementation type (new project/error-fixing/component/state/styling)
   - Note any specific requirements or constraints
   - If the query is related to error or bug fixing follow the [Troubleshooting](mdc:.cursor/rules/instructions/error-correction/troubleshooting-guide.mdc) guide.

2. **Documentation Reference**
   - New project: 
    For the implementation, refer to - [Implementation Steps](mdc:.github/modus-implementation-steps.instructions.md)
    For Checking the common mistakes, refer to - [Common Mistakes](mdc:.cursor/rules/instructions/lessons-learned/common-mistakes.mdc)

   Based on your framework:

### React Implementation
   - Components: [React Component Patterns](mdc:.cursor/rules/instructions/frameworks/react/component-patterns.mdc)
   - State management: [React State Management](mdc:.cursor/rules/instructions/frameworks/react/state-management.mdc)
   - Best Practices: [React Best Practices](mdc:.cursor/rules/instructions/frameworks/react/best-practices.mdc)

### Angular Implementation
   - Components: [Angular Component Patterns](mdc:.cursor/rules/instructions/frameworks/angular/component-patterns.mdc)
   - State management: [Angular State Management](mdc:.cursor/rules/instructions/frameworks/angular/state-management.mdc)
   - Best Practices: [Angular Best Practices](mdc:.cursor/rules/instructions/frameworks/angular/best-practices.mdc)


## Development Workflow Documentation

1. **During Development**
   - **Log each implementation step**
   - Document component choices
   - Note any issues encountered
   - Record solutions implemented

2. **For Issues**
   - Document in Common Mistakes guide [Common Mistakes](mdc:.cursor/rules/instructions/lessons-learned/common-mistakes.mdc)
   - Include:
     - Problem description
     - Correct implementation
     - Prevention steps

